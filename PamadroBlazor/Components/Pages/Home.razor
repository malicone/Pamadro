@page "/"
@using PamadroBlazor.Models
@using System.Timers
@rendermode InteractiveServer

<PageTitle>Pamadro Online</PageTitle>

<div class="row">
    <div class="col-2">
        
    </div>
    <div class="col-8">

<div class="text-center">
    <img src="images/Tomato_256.png" alt="Pamadro" class="img-fluid" />
    <h3>Simple Pomodoro technique timer to boost your productivity</h3>

    <p>
        What is Pomodoro technique? Well, it's a time management method which allows you stop wasting time (procrastinate). 
        Just start timer, work, take a break, work, break, work and so on. It really helps people. 
        <a href="https://en.wikipedia.org/wiki/Pomodoro_Technique">Learn more</a> about it on
        Wikipedia.
    </p>

    <div class="card mx-auto mb-4" style="width: 18rem;">
        <div class="card-body">
            <h5 class="card-title">@StatusMessage</h5>
            <br />

            <EditForm Model="TimerParameters">

                <div class="form-group">
                    <label for="workTimeMin">Work time (min)</label>                    
                    <InputNumber id="workTimeMin" @bind-Value="TimerParameters.WorkTimeMin" 
                        class="form-control timer-input-text mx-auto" />
                </div>
                <br />
                <div class="form-group">
                    <label for="shortBreakTimeMin">Break time (min)</label>                    
                    <InputNumber id="shortBreakTimeMin" @bind-Value="TimerParameters.ShortBreakTimeMin"
                                    class="form-control timer-input-text mx-auto" />
                </div>
                <br />
                <div class="form-group">
                    <label for="taskName">Task Name</label>
                    <InputText id="taskName" @bind-Value="TimerParameters.TaskName" 
                        class="form-control timer-input-text mx-auto" />
                </div>
                <br />

                <div class="form-group">
                    <label for="playSound">Play Sound</label>
                    <InputCheckbox id="playSound" @bind-Value="TimerParameters.PlaySound"
                        class="mx-auto" />
                </div>
                <br />

                <div class="form-group">
                    <label for="showNotification">Show Notification</label>
                    <InputCheckbox id="showNotification" @bind-Value="TimerParameters.ShowNotification"
                        class="mx-auto" />
                </div>
                <br />

                <div class="form-group">
                    <button class="btn btn-primary timer-button" @onclick="StartStopHandler">@StartStopCaption</button>
                </div>
                <br />

                <div class="form-group">
                    <button class="btn btn-primary timer-button" @onclick="PauseResumeHandler">@PauseResumeCaption</button>
                </div>

            </EditForm>

        </div>
    </div>

</div>

    </div>
    <div class="col-2">
    
    </div>
</div>

@code {
    private void StartStopHandler()
    {
        if (StartStopCaption == StartCaption)
        {
            StartStopCaption = StopCaption;            
            timerTask.Interval = TimerParameters.WorkTimeMin * SecPerMin * MSecPerSec;
            timerTask.Elapsed += TimerTask_Elapsed;
            timerTask.Start();

            CountdownSec = TimerParameters.WorkTimeMin * SecPerMin;
            timerCounter.Interval = MSecPerSec;
            timerCounter.Elapsed += TimerCounter_Elapsed;
            timerCounter.Start();

            Console.WriteLine("Started");
        }
        else
        {
            StartStopCaption = StartCaption;
            Console.WriteLine("Stopped");
        }
        Console.WriteLine($"StartStopCaption: {StartStopCaption}");
    }
    private void PauseResumeHandler()
    {
        if (PauseResumeCaption == PauseCaption)
        {
            PauseResumeCaption = ResumeCaption;
        }
        else
        {
            PauseResumeCaption = PauseCaption;
        }
    }

    private void TimerTask_Elapsed(object? sender, ElapsedEventArgs e)
    {
        StatusMessage = "Time is up!";
    }
    private void TimerCounter_Elapsed(object? sender, ElapsedEventArgs e)
    {
        CountdownSec--;
        StatusMessage = $"{CountdownSec / SecPerMin}:{CountdownSec % SecPerMin} Pamadro";
        Console.WriteLine(StatusMessage);
    }

    private TimerParameters TimerParameters = new TimerParameters();    
    private Timer timerTask = new Timer();
    private Timer timerCounter = new Timer();
    private int CountdownSec = 0;
    
    private string StatusMessage = "Pamadro";

    private const string StartCaption = "Start";
    private const string StopCaption = "Stop";
    private const string PauseCaption = "Pause";
    private const string ResumeCaption = "Resume";

    private string StartStopCaption = StartCaption;
    private string PauseResumeCaption = PauseCaption;

    private const int SecPerMin = 60;
    private const int MSecPerSec = 1000;
}

unit MainForm;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Mask, Vcl.ExtCtrls;

type
  TfrmMain = class(TForm)
    edtWorkTime: TLabeledEdit;
    edtTaskName: TLabeledEdit;
    edtRestTime: TLabeledEdit;
    btnStart: TButton;
    timerTask: TTimer;
    timerCounter: TTimer;
    btnStop: TButton;
    procedure btnStartClick(Sender: TObject);
    procedure timerTaskTimer(Sender: TObject);
    procedure timerCounterTimer(Sender: TObject);
    procedure btnStopClick(Sender: TObject);
  private const
    _WORKING_TIME = 0;
    _REST_TIME = 1;
    DEFAULT_WORKING_TIME_MIN = 50;
    DEFAULT_REST_TIME_MIN = 10;
    FORM_TITLE_FORMATER = 'Pomadro %s %2.2d:%2.2d';
    FORM_TITLE_DEFAULT = 'Pomadro';
    WORKING_LABEL = 'w';
    REST_LABEL = 'r';
  private
    TimeCounterSec: Integer;

    procedure StartWork;
    procedure StartRest;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmMain: TfrmMain;

implementation

{$R *.dfm}

procedure TfrmMain.btnStartClick(Sender: TObject);
begin
  StartWork;
end;

procedure TfrmMain.timerTaskTimer(Sender: TObject);
var
  WorkingTimeMin: Integer;
begin
  if timerTask.Tag = _WORKING_TIME then
  begin
    Beep;
    StartRest;
  end
  else
  begin
    Beep;
    Sleep(1000);
    Beep;
    StartWork;
  end;
end;

procedure TfrmMain.btnStopClick(Sender: TObject);
begin
  timerTask.Enabled := False;
  timerCounter.Enabled := False;
  Caption := FORM_TITLE_DEFAULT;
  TimeCounterSec := 0;
end;

procedure TfrmMain.StartWork;
var
  WorkingTimeMin: Integer;
begin
  WorkingTimeMin := StrToIntDef(Trim(edtWorkTime.Text), DEFAULT_WORKING_TIME_MIN);
  timerTask.Interval := WorkingTimeMin * SecsPerMin * MSecsPerSec;
  timerTask.Tag := _WORKING_TIME;
  timerTask.Enabled := True;
  TimeCounterSec := WorkingTimeMin * SecsPerMin;
  timerCounter.Interval := MSecsPerSec;
  timerCounter.Enabled := True;
end;

procedure TfrmMain.StartRest;
var
  RestTimeMin: Integer;
begin
  timerTask.Enabled := False;
  RestTimeMin := StrToIntDef(Trim(edtRestTime.Text), DEFAULT_REST_TIME_MIN);
  timerTask.Interval := RestTimeMin * SecsPerMin * MSecsPerSec;
  timerCounter.Enabled := False;
  timerTask.Tag := _REST_TIME;
  timerTask.Enabled := True;
  timerCounter.Enabled := True;
end;

procedure TfrmMain.timerCounterTimer(Sender: TObject);
var
  Minuts, Seconds: Integer;
  TypeLabel: string;
begin
  Dec(TimeCounterSec);
  Minuts := TimeCounterSec div SecsPerMin;
  Seconds := TimeCounterSec mod SecsPerMin;
  TypeLabel := REST_LABEL;
  if timerTask.Tag = _WORKING_TIME then
    TypeLabel := WORKING_LABEL;
  Caption := Format(FORM_TITLE_FORMATER, [TypeLabel, Minuts, Seconds]);
end;

end.
